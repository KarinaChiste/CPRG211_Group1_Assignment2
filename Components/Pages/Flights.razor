@page "/flights"
@using CPRG211_Group1_Assignment2.Classes

<div class="text-center">
    <h5>Flight Finder</h5>
</div>

<form class="d-flex gap-4">

    <div class="form-group flex-grow-1">
        <label for="from">From:</label>
        <input @bind="from" type="text" class="form-control" placeholder="Any">
    </div>
    <div class="form-group flex-grow-1">
        <label for="to">To:</label>
        <input @bind="to" type="text" class="form-control" placeholder="Any">
    </div>
    <div class="form-group flex-grow-1">
        <label for="day">Day:</label>
        <input @bind="day" type="text" class="form-control" placeholder="Any">
    </div>
    <div class="align-self-end flex-grow-1" style="width: 190px;">
        <button type="button" class="btn btn-primary w-100" @onclick="FindFlights"
        style="white-space: nowrap;">Find flights</button>
    </div>

</form>

<div class="text-center mt-4">
    <h5>Flights</h5>
</div>

<div class="form-group">
    <select class="form-select" @onchange="FlightClick">

        @foreach (Flight flight in flights) 
        {
            if (chosenFlight == 1)
            {
                <option selected value="@flight">@flight.ToString()</option>
            }
            else
            {
                <option value="@flight">@flight.ToString()</option>
            }
        }

    </select>
</div>

<div class="text-center mt-4">
    <h5>Reserve</h5>
</div>


<div>
    <label for="FlightCode">Flight code:</label>
    <input type="text" class="form-control" readonly placeholder="Flight" style="width:100%" name="flightCode" value="@flightCode" />
</div>

<div>
    <label>Airline:</label>
    <input type="text" class="form-control" readonly placeholder="Airline" style="width:100%" name="airline" value="@airline" />
</div>

<div>
    <label>Day:</label>
    <input type="text" class="form-control" readonly placeholder="Day" style="width:100%" name="day" value="@chosenday" />
</div>

<div>
    <label>Time:</label>
    <input type="text" class="form-control" readonly placeholder="Time" style="width:100%" name="time" value="@time" />
</div>

<div>
    <label>Cost:</label>
    <input type="text" class="form-control" readonly placeholder="0" style="width:100%" name="cost" value="@cost" />
</div>

<div>
    <label>Name:</label>
    <input type="text" class="form-control" placeholder="Name" style="width:100%" name="name" @bind="name" />
</div>

<div>
    <label>Citizenship:</label>
    <input type="text" class="form-control" placeholder="Citizenship" style="width:100%" name="citizenship" @bind="citizenship" />
</div>

<div style="width: 25%; justify-self:center; padding:10px ">
    <button type="button" class="btn btn-primary w-100 " @onclick="MakeReservation">Reserve</button>
    <p> Reservation Code: <span> @reserveCode</span></p>
</div>



@code {
    private string from;
    private string to;
    private string day;

    private string chosenday;
    private string flightCode;
    private string airline;
    private string time;
    private string cost;
    private int capacity;
    private string airport1;
    private string airport2;

    public string flight;

    public int chosenFlight = 1;
    public string[] flightDetails;

    public string name;
    public string citizenship;

    public string reserveCode = string.Empty;

    // private List<Flight> selectedFlights = new List<Flight>();

    private FlightSearch flightSearch = new FlightSearch();
    private List<Flight> flights = new List<Flight>();
    private ReservationManager reserve = new ReservationManager();

    private void FindFlights()
    {
        if (string.IsNullOrWhiteSpace(from) && string.IsNullOrWhiteSpace(to) && string.IsNullOrWhiteSpace(day))
        {
            flights.Clear();
            return;
        }

        flights = FlightSearch.GetFlights().Where(item =>
               (string.IsNullOrWhiteSpace(from) || item.OriginAirport.Equals(from, StringComparison.OrdinalIgnoreCase)) &&
               (string.IsNullOrWhiteSpace(to) || item.DestAirport.Equals(to, StringComparison.OrdinalIgnoreCase)) &&
               (string.IsNullOrWhiteSpace(day) || item.Day.Equals(day, StringComparison.OrdinalIgnoreCase))
               ).ToList();
        if(flights.Count !=0)  FlightSet(flights[flights.Count-1].ToString());
    }

    public void FlightClick(ChangeEventArgs arg1)
    {
        if (arg1.Value is not null)
        {
            string myFlight = (string)arg1.Value;
            FlightSet(myFlight);
        }
        // airline = flight.Airline; 
        //         day = flight.Day;  
        //         time = flight.DepartureTime;  
        //        cost = flight.Price; 
    }

    public void FlightSet(string theFlight)
    {
        if(theFlight.Length != 0)
        {
            flightDetails =theFlight.Split(", ");
            flightCode = flightDetails[0];
            airline = flightDetails[1];
            airport1 = flightDetails[2];
            airport2 = flightDetails[3];
            chosenday = flightDetails[4];
            time = flightDetails[5];
            capacity = int.Parse(flightDetails[6]);
            cost = flightDetails[7];
        }
    }

    public void MakeReservation()
    {
        try
        {
            //Flight myFlight = new Flight(flightCode, airline, airport1, airport2, chosenday, time, capacity, cost);
            Flight? myFlight = FlightSearch.GetFlights().Find(item => item.FlightCode == flightCode);
            if (myFlight is not null)
            {
                Reservation reservation = reserve.makeReservation(myFlight, name, citizenship);
                reserveCode = reservation.ReservationCode;
            }
        }

        catch (Exception ex)
        {
            reserveCode = ex.Message;
        }
    }

}  






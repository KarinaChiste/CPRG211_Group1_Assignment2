@page "/reservations"
@using CPRG211_Group1_Assignment2.Classes;

@using System.Collections.Generic;
@using System.Linq;
@using System.Text;
@using System.Text.Json;
@using System.Threading.Tasks;

@*for search*@
<div class="text-center">
	<h5>Reservation Finder</h5>
</div>
<form class="d-flex gap-4">
	<div class="form-group flex-grow-1">
		<label for="code">Code:</label>
		<input type="text" class="form-control" id="code" placeholder="Any" @bind="searchResCode">
	</div>
	<div class="form-group flex-grow-1">
		<label for="airline">Airline:</label>
		<input type="text" class="form-control" id="airline" placeholder="Any" @bind="searchAirline">
	</div>
	<div class="form-group flex-grow-1">
		<label for="name">Name:</label>
		<input type="text" class="form-control" id="name" placeholder="Any" @bind="searchName">
	</div>
	<div class="align-self-end flex-grow-1" style="width: 190px;">
		<button type="button" class="btn btn-primary w-100" style="white-space: nowrap;" @onclick="FindReservations">
			Find reservations
		</button>
	</div>
</form>

<div class="text-center mt-4">
	<h5>Reservations</h5>
</div>
<div class="form-group">
	<select class="form-select" @onchange="ReservationChanged">
		@foreach (Reservation r in searchReservations)
		{
			<option value="@r">@r.ToString()</option>
		}
	</select>
</div>


@* for modify *@
<div class="text-center mt-4">
	<h5>Modify a reservation</h5>
</div>

<div class="form-group flex-grow-1">
	<div>
		<label for="ReservationCode">Reservation Code</label>
		<input type="text" class="form-control" id="FlightCode" placeholder="Reservation Code" value="@ReservationCode" readonly>
	</div>
	<div>
		<label for="FlightCode">Flight code</label>
		<input type="text" class="form-control" id="FlightCode" placeholder="Flight Code" value="@FlightCode" readonly>
	</div>
	<div>
		<label for="Airline">Airline</label>
		<input type="text" class="form-control" id="Airline" placeholder="Airline" value="@Airline" readonly>
	</div>
	<div>
		<label for="Cost">Cost</label>
		<input type="text" class="form-control" id="Cost" placeholder="Cost" value="@Cost" readonly>
	</div>
	<div>
		<label for="Name">Name</label>
		<input type="text" class="form-control" id="Full Name" placeholder="Full Name" @bind="Name">
	</div>
	<div>
		<label for="Citizenship">Citizenship</label>
		<input type="text" class="form-control" id="Citizenship" placeholder="Citizenship" @bind="Citizenship">
	</div>
	<div>
		<label for="Status">Status</label>
		<select class="form-select" @bind="Status">
			<option value="Active">Active</option>
			<option value="Inactive">Inactive</option>
		</select>
	</div>
	<div>
		<button type="submit" class="btn btn-primary w-100 text-center mt-4"
		style="white-space: nowrap;" @onclick="ModifyReservation">
			Update
		</button>
		@if (valuesValid == false)
		{
			<p class="text-center mt-4">Please make sure all fields are filled out correctly. @errorMessage</p>
		}
	</div>
</div>

@code {
	public string? ReservationCode { get; set; }
	public string? FlightCode { get; set; }
	public string? Airline { get; set; }
	public string? Cost { get; set; }
	public string? Name { get; set; }
	public string? Citizenship { get; set; }
	public string? Status { get; set; }
	public string searchResCode = "";
	public string searchAirline = "";
	public string searchName = "";

	public bool valuesValid = true;
	public string errorMessage = "";

	ReservationManager reservationManager = new ReservationManager();

	private void ReservationChanged(ChangeEventArgs e)
	{
		if (e.Value is not null)
		{
			string str = (string)e.Value;
			SetReservation(str);
		}
	}

	private void SetReservation(string theReservation)
	{
		if (theReservation.Length != 0)
		{
			string[] strArray = theReservation.Split(", ");
			ReservationCode = strArray[0];
			Name = strArray[1];
			Citizenship = strArray[2];
			Status = strArray[3];
			FlightCode = strArray[4];
			Airline = strArray[5];
			Cost = strArray[11];
		}
	}

	public void ModifyReservation()
	{
		try
		{
			Reservation? reservation = ReservationManager.reservations.Find(item => item.ReservationCode == ReservationCode);
			if (reservation is not null)
			{
				reservation.FullName = Name;
				reservation.Citizenship = Citizenship;
				reservation.Status = Status;

				valuesValid = true;
				reservationManager.persist();
			}
		}
		catch (Exception e)
		{
			valuesValid = false;
			errorMessage = e.Message;
		}
	}

	List<Reservation> searchReservations = new List<Reservation>();

	public void FindReservations()
	{
		searchReservations = ReservationManager.reservations.Where(item =>
			(string.IsNullOrWhiteSpace(searchResCode) || item.ReservationCode.Contains(searchResCode, StringComparison.OrdinalIgnoreCase)) &&
			(string.IsNullOrWhiteSpace(searchAirline) || item.Airline.Contains(searchAirline, StringComparison.OrdinalIgnoreCase)) &&
			(string.IsNullOrWhiteSpace(searchName) || item.FullName.Contains(searchName, StringComparison.OrdinalIgnoreCase))
		).ToList();
		if (searchReservations.Count != 0) SetReservation(searchReservations[0].ToString());
	}
}